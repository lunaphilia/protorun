# Cline Rules

## プロジェクトパターン
- 言語設計は関数型プログラミング、強力な型システム、メモリ安全性の統合を重視
- 代数的効果と所有権モデルを組み合わせた独自のアプローチ
- Scala、Haskell、Rustからインスピレーションを得た言語機能
- パーサー実装にはNomパーサーコンビネータライブラリを使用し、宣言的で効率的な構文解析を実現

## ユーザー設定
- 日本語でのコミュニケーション
- コミットメッセージは英語で記述

## 開発ワークフロー
- プロダクションコードを小さく修正し、こまめにテストコードを書き、テストが通ることを確認してから次のプロダクションコードの修正を行う
- テストが失敗したときには思い込みで修正する前にデバッグを行って事実から原因を特定し、的確にかつ簡潔に修正する
- テストは最上位から入力を通すのではなく、関数ごとに書いてボトムアップに関数の振る舞いが正しいことを確認する。それを組み合わせたより大きな振る舞いのテストを書く際は、部品となる関数をモック化しても良い
- 言語仕様の詳細化と形式化
- 段階的な実装アプローチ（インタープリタから始め、徐々にコンパイラ機能を追加）
- サンプルプログラムによる機能検証
- こまめなコミットとプッシュによるコード管理
- 機能ごとのブランチ作成と開発
- テスト駆動開発の採用（機能実装前にテストを作成）
- コードの整理と簡素化を定期的に行う（使用されていないコードの削除など）

## 実装パターン
- Nomパーサーコンビネータを使用した宣言的な構文解析
- エラーメッセージにはコンテキスト情報を含め、ユーザーにとって理解しやすいものにする
- 比較演算子のパースでは2文字演算子（<=, >=）を1文字演算子よりも先に試す
- 関数型プログラミングスタイルを優先し、副作用を最小限に抑える
- 型安全性を重視したコード設計

## Gitワークフロー
- こまめにコミットし、作業の進捗を記録する
- タスク終了前に必ずgit pushを実行する
- 個別の機能開発には専用のブランチを作成する
- 各ブランチの目的と開発中の機能を記憶しておく
- コミットメッセージは英語で、変更内容を明確に記述する

## 既知の課題
- 言語機能の複雑さとシンプルさのバランス
- 代数的効果と所有権システムの統合における理論的課題
- 型推論、効果推論、所有権推論の相互作用
- パーサーの性能最適化（大規模なソースコードの解析時）
- エラーメッセージの改善（より具体的で役立つ情報の提供）
