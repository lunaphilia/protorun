# Cline Rules

## プロジェクトパターン
- 言語設計は関数型プログラミング、強力な型システム、メモリ安全性の統合を重視
- 代数的効果と所有権モデルを組み合わせた独自のアプローチ
- Scala、Haskell、Rustからインスピレーションを得た言語機能

## ユーザー設定
- 日本語でのコミュニケーション
- コミットメッセージは英語で記述

## 開発ワークフロー
- 言語仕様の詳細化と形式化
- 段階的な実装アプローチ（インタープリタから始め、徐々にコンパイラ機能を追加）
- サンプルプログラムによる機能検証
- こまめなコミットとプッシュによるコード管理
- 機能ごとのブランチ作成と開発

## Gitワークフロー
- こまめにコミットし、作業の進捗を記録する
- タスク終了前に必ずgit pushを実行する
- 個別の機能開発には専用のブランチを作成する
- 各ブランチの目的と開発中の機能を記憶しておく
- コミットメッセージは英語で、変更内容を明確に記述する

## 既知の課題
- 言語機能の複雑さとシンプルさのバランス
- 代数的効果と所有権システムの統合における理論的課題
- 型推論、効果推論、所有権推論の相互作用
