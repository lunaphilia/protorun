// Protorun言語サンプル: 所有権と借用の例

// コンソール効果
effect Console {
  fn log(message: String): Unit
}

// コンソールハンドラ
fn runConsole<T>(action: () -> T & Console): T = {
  handle action() {
    Console.log(message) => {
      println(message)
      resume()
    }
  }
}

// ベクトル型（可変長配列）
type Vec<T> = {
  elements: [T],
  length: Int
}

// Showトレイト（新しい構文）
trait Show {
  fn show(self): String
}

// 基本型のShow実装
impl Int: Show {
  fn show(self): String = self.toString()
}

impl String: Show {
  fn show(self): String = self
}

// ベクトルの作成
fn createVec<T>(): Vec<T> = {
  {
    elements: [],
    length: 0
  }
}

// ベクトルに要素を追加（所有権を消費して新しいベクトルを返す）
fn push<T>(vec: Vec<T>, value: T): Vec<T> = {
  {
    elements: vec.elements.concat([value]),
    length: vec.length + 1
  }
}

// ベクトルの要素を取得（借用を使用）
fn get<T>(vec: &Vec<T>, index: Int): Option<&T> = {
  if index >= 0 && index < vec.length {
    Option.Some(&vec.elements[index])
  } else {
    Option.None
  }
}

// ベクトルの要素を変更（可変借用を使用）
fn set<T>(vec: &mut Vec<T>, index: Int, value: T): Bool = {
  if index >= 0 && index < vec.length {
    vec.elements[index] = value
    true
  } else {
    false
  }
}

// 所有権の移動の例
fn takeOwnership<T>(vec: Vec<T>): Int = {
  // vecの所有権がここに移動
  vec.length
}

// 所有権の移動と返却の例
fn processAndReturn<T>(vec: Vec<T>): Vec<T> = {
  // vecの所有権を取得し、処理後に返却
  let newVec = push(vec, vec.elements[0])
  newVec  // 新しいベクトルの所有権を返却
}

// 借用の例
fn printVec<T: Show>(vec: &Vec<T>): Unit & Console = {
  Console.log("ベクトルの内容:")
  
  // パイプライン演算子を使用
  0..vec.length
    |> (range => {
      for i in range {
        match get(vec, i) {
          Option.Some(value) => Console.log(s"[$i]: ${(*value).show()}"),
          Option.None => {}
        }
      }
    })
}

// 可変借用の例
fn doubleValues(vec: &mut Vec<Int>): Unit = {
  for i in 0..vec.length {
    match get(vec, i) {
      Option.Some(value) => {
        set(vec, i, *value * 2)
      },
      Option.None => {}
    }
  }
}

// 管理型（自動クリーンアップ）
managed File {
  path: String,
  handle: FileHandle,
  
  // 獲得関数（コンストラクタ）
  fn open(path: String): Result<File, IOError> = {
    // FileHandle.openの結果を直接返す
    let handleResult = FileHandle.open(path)
    
    match handleResult {
      Result.Ok(handle) => Result.Ok(File {
        path: path,
        handle: handle
      }),
      Result.Err(error) => Result.Err(IOError.from(error))
    }
  }
  
  // 解放関数（デストラクタ）
  fn close(self): Unit = {
    self.handle.close()
  }
  
  // ファイルから読み込み（不変借用）
  fn readToString(self: &Self): Result<String, IOError> = {
    // handle.readToStringの結果を直接返す
    let readResult = self.handle.readToString()
    
    match readResult {
      Result.Ok(content) => Result.Ok(content),
      Result.Err(error) => Result.Err(IOError.from(error))
    }
  }
  
  // ファイルに書き込み（可変借用）
  fn write(self: &mut Self, content: String): Result<Unit, IOError> = {
    // handle.writeの結果を直接返す
    let writeResult = self.handle.write(content)
    
    match writeResult {
      Result.Ok(_) => Result.Ok(()),
      Result.Err(error) => Result.Err(IOError.from(error))
    }
  }
}

// リソース型を使ったファイル処理
fn processFile(path: String): Result<String, IOError> & Console = {
  // ファイルを開く（スコープ終了時に自動的に閉じられる）
  let file = File.open(path)?
  
  // ファイル操作
  Console.log(s"ファイルを開きました: ${file.path}")
  let content = file.readToString()?
  Console.log(s"ファイルの内容: $content")
  
  Result.Ok(content)
} // ここでfileのclose()が自動的に呼び出される

// ライフタイムの例
fn longest<'a>(s1: &'a String, s2: &'a String): &'a String = {
  if s1.length > s2.length { s1 } else { s2 }
}

// メイン関数
fn main(): Unit & Console = {
  Console.log("所有権と借用の例")
  
  // ベクトル操作の例
  demoVectorOperations()
  
  // ライフタイムの例
  demoLifetimes()
  
  // リソース管理の例
  demoResourceManagement()
}

// ベクトル操作のデモ
fn demoVectorOperations(): Unit & Console = {
  Console.log("\n=== ベクトル操作のデモ ===")
  
  // ベクトルの作成と操作
  let mut vec = createVec<Int>()
    |> (v => push(v, 1))
    |> (v => push(v, 2))
    |> (v => push(v, 3))
  
  // 借用を使った読み取り
  printVec(&vec)
  
  // 可変借用を使った変更
  doubleValues(&mut vec)
  
  // 変更後の内容を表示
  printVec(&vec)
  
  // 所有権の移動
  let length = takeOwnership(vec)
  Console.log(s"ベクトルの長さ: $length")
  
  // ここでvecは使用不可（所有権が移動済み）
  // printVec(&vec)  // コンパイルエラー
  
  // 新しいベクトルを作成
  let mut newVec = createVec<String>()
    |> (v => push(v, "Hello"))
    |> (v => push(v, "World"))
  
  // 所有権の移動と返却
  newVec = processAndReturn(newVec)
  printVec(&newVec)
}

// ライフタイムのデモ
fn demoLifetimes(): Unit & Console = {
  Console.log("\n=== ライフタイムのデモ ===")
  
  let s1 = "短い文字列"
  let s2 = "これはより長い文字列です"
  let longerStr = longest(&s1, &s2)
  Console.log(s"より長い文字列: $longerStr")
}

// リソース管理のデモ
fn demoResourceManagement(): Unit & Console = {
  Console.log("\n=== リソース管理のデモ ===")
  
  match processFile("example.txt") {
    Result.Ok(content) => Console.log(s"ファイル処理成功: $content"),
    Result.Err(error) => Console.log(s"ファイル処理エラー: $error")
  }
}

// プログラム実行
fn run(): Unit = {
  // 効果スコープを使用
  with runConsole: Console {
    main()
  }
}
